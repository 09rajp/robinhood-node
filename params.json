{"name":"Robinhood Node","tagline":"NodeJS API wrapper for the private Robinhood API","body":"<h1><img src=\"https://raw.githubusercontent.com/aurbano/robinhood-node/master/.github/robinhood.png\"/> Robinhood NodeJS</h1>\r\n\r\n[![Travis](https://img.shields.io/travis/aurbano/robinhood-node.svg?style=flat-square)](https://travis-ci.org/aurbano/robinhood-node)\r\n[![npm](https://img.shields.io/npm/v/robinhood.svg?style=flat-square)](https://www.npmjs.com/package/robinhood)\r\n[![David](https://img.shields.io/david/aurbano/Robinhood-Node.svg?style=flat-square)](https://david-dm.org/aurbano/robinhood-node)\r\n[![GitHub license](https://img.shields.io/github/license/aurbano/Robinhood-Node.svg?style=flat-square)](https://github.com/aurbano/robinhood-node/blob/master/LICENSE)\r\n\r\nNodeJS Framework to make trades with the private [Robinhood](https://www.robinhood.com/) API. Using this API is not encouraged, since it's not officially available. See this [blog post](https://medium.com/@rohanpai25/reversing-robinhood-free-accessible-automated-stock-trading-f40fba1e7d8b) for more information on the API.\r\n\r\nI have read [Robinhood's Terms and Conditions](https://brokerage-static.s3.amazonaws.com/assets/robinhood/legal/Robinhood%20Terms%20and%20Conditions.pdf) and, without being a lawyer and/or this being valid in any way, it doesn't seem like interacting with their servers using the API is against them.\r\n\r\n> This framework was inspired by a deprecated Python framework originally developed by [@Rohanpai](https://github.com/rohanpai).\r\n\r\n## Features\r\n\r\n* Placing buy orders `Robinhood.place_buy_order`\r\n* Placing sell order `Robinhood.place_sell_order`\r\n* Quote Information `Robinhood.quote_data`\r\n* Get Dividend information `Robinhood.dividends (v0.2+)`\r\n* Get User information `Robinhood.user (v0.2+)`\r\n* Get Orders `Robinhood.orders (v0.2+)`\r\n* _More coming soon..._\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install --save robinhood\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar Robinhood = require('robinhood');\r\n\r\n// Initialize\r\nvar trader = Robinhood(\r\n    {\r\n        username: 'user',\r\n        password: 'password'\r\n    },\r\n    function() {\r\n        trader.quote_data('GOOG', function(err, httpResponse, body){\r\n            if (err) {\r\n                console.error(err);\r\n                return;\r\n            }\r\n            console.log('Quote data:', body);\r\n        });\r\n    }\r\n);\r\n```\r\n\r\n## API\r\n\r\nBefore using these methods, make sure you have initialized Robinhood using the snippet above.\r\n\r\n*Feel free to send a pull request expanding this with examples or info about the return objects*\r\n\r\n### `investment_profile(callback)`\r\n\r\nGet the current user's investment profile.\r\n\r\n### `instruments(stock, callback)`\r\n\r\nGet the user's instruments for a specified stock.\r\n\r\n### `quote_data(stock, callback) // Not authenticated`\r\n\r\nGet the user's quote data for a specified stock.\r\n\r\nReturn message: (passed to the callback)\r\n\r\n```js\r\n{\r\n    results: [\r\n        {\r\n            ask_price: String, // Float number in a String, e.g. '735.7800'\r\n            ask_size: Number, // Integer\r\n            bid_price: String, // Float number in a String, e.g. '731.5000'\r\n            bid_size: Number, // Integer\r\n            last_trade_price: String, // Float number in a String, e.g. '726.3900'\r\n            last_extended_hours_trade_price: String, // Float number in a String, e.g. '735.7500'\r\n            previous_close: String, // Float number in a String, e.g. '743.6200'\r\n            adjusted_previous_close: String, // Float number in a String, e.g. '743.6200'\r\n            previous_close_date: String, // YYYY-MM-DD e.g. '2016-01-06'\r\n            symbol: String, // e.g. 'GOOG'\r\n            trading_halted: Boolean, \r\n            updated_at: String, // YYYY-MM-DDTHH:MM:SS e.g. '2016-01-07T21:00:00Z'\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n### `accounts(callback)`\r\n\r\nGet the user's accounts.\r\n\r\n### `user(callback)`\r\n\r\nGet the user information.\r\n\r\n### `dividends(callback)`\r\n\r\nGet the user's dividends information.\r\n\r\n### `orders(callback)`\r\n\r\nGet the user's orders information.\r\n\r\n### `place_buy_order(options, callback)`\r\n\r\nPlace a buy order on a specified stock.\r\n\r\nOptions must contain:\r\n\r\n```js\r\n{\r\n    bid_price: Number,\r\n    quantity: Number,\r\n    instrument: {\r\n        url: String,\r\n        symbol: String\r\n    },\r\n    // Optional:\r\n    trigger: String, // Defaults to \"gfd\" (Good For Day)\r\n    time: String,    // Defaults to \"immediate\"\r\n    type: String     // Defaults to \"market\"\r\n}\r\n```\r\n\r\nFor the Optional ones, the values can be:\r\n\r\n*[Disclaimer: This is an unofficial API based on reverse engineering, and the following option values have not been confirmed]*\r\n\r\n#### `trigger`\r\n\r\nA *[trade trigger](http://www.investopedia.com/terms/t/trade-trigger.asp)* is usually a market condition, such as a rise or fall in the price of an index or security.\r\n\r\nValues can be:\r\n\r\n* `gfd`: Good For Day\r\n* `gtc`: Good Till Cancelled\r\n* `oco`: Order Cancels Other\r\n\r\n#### `time`\r\n\r\nThe *[time in force](http://www.investopedia.com/terms/t/timeinforce.asp?layout=infini&v=3A)* for an order defines the length of time over which an order will continue working before it is canceled.\r\n\r\nValues can be:\r\n\r\n* `immediate` : The order will be cancelled unless it is fulfilled immediately.\r\n* `day` : The order will be cancelled at the end of the trading day.\r\n\r\n### `place_sell_order(options, callback)`\r\n\r\nPlace a sell order on a specified stock.\r\n\r\nOptions must contain:\r\n\r\n```js\r\n{\r\n    bid_price: Number,\r\n    quantity: Number,\r\n    instrument: {\r\n        url: String,\r\n        symbol: String\r\n    },\r\n    // Optional:\r\n    trigger: String, // Defaults to \"gfd\" (Good For Day)\r\n    time: String,    // Defaults to \"immediate\"\r\n    type: String     // Defaults to \"market\"\r\n}\r\n```\r\n\r\nFor the Optional ones, the values can be:\r\n\r\n*[Disclaimer: This is an unofficial API based on reverse engineering, and the following option values have not been confirmed]*\r\n\r\n#### `trigger`\r\n\r\nA *[trade trigger](http://www.investopedia.com/terms/t/trade-trigger.asp)* is usually a market condition, such as a rise or fall in the price of an index or security.\r\n\r\nValues can be:\r\n\r\n* `gfd`: Good For Day\r\n* `gtc`: Good Till Cancelled\r\n* `oco`: Order Cancels Other\r\n\r\n#### `time`\r\n\r\nThe *[time in force](http://www.investopedia.com/terms/t/timeinforce.asp?layout=infini&v=3A)* for an order defines the length of time over which an order will continue working before it is canceled.\r\n\r\nValues can be:\r\n\r\n* `immediate` : The order will be cancelled unless it is fulfilled immediately.\r\n* `day` : The order will be cancelled at the end of the trading day.\r\n\r\n\r\n------------------\r\nThis framework is still in a very alpha version and will likely change, so production usage is completely discouraged.\r\n\r\n>Even though this should be obvious: I am not affiliated in any way with Robinhood Financial LLC. I don't mean any harm or disruption in their service by providing this. Furthermore, I believe they are working on an amazing product, and hope that by publishing this NodeJS framework their users can benefit in even more ways from working with them.\r\n\r\n[![Analytics](https://ga-beacon.appspot.com/UA-3181088-16/robinhood/readme)](https://github.com/aurbano)\r\n","google":"UA-3181088-4","note":"Don't delete this file! It's used internally to help with page regeneration."}